#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
description: get the most recent donor json files
version: 0.0.1
created: 2018-02-21
author: Ed Nykaza
dependencies:
    * requires environmental variables: import environmentalVariables.py
    * list of donors generated by get-donor-list.py
license: BSD-2-Clause
TODO:
* [] save files in the cloud
"""

# %% load in required libraries
import environmentalVariables
import pandas as pd
import datetime as dt
import os
import sys
import subprocess as sub
import argparse


# %% user inputs (choices to be made in order to run the code)
codeDescription = "Download donor's json files"

parser = argparse.ArgumentParser(description=codeDescription)

parser.add_argument("-d",
                    "--date-stamp",
                    dest="dateStamp",
                    default=dt.datetime.now().strftime("%Y-%m-%d"),
                    help="date in '%Y-%m-%d' format of unique donor list" +
                    "(e.g., PHI-2018-03-02-uniqueDonorList)")

parser.add_argument("-o",
                    "--output-data-path",
                    dest="dataPath",
                    default="./data",
                    help="the output path where the data is stored")

args = parser.parse_args()


# %% Make sure the data directory exists
if not os.path.isdir(args.dataPath):
    sys.exit("{0} is not a directory".format(args.dataPath))

# %% define global variables
phiDateStamp = "PHI-" + args.dateStamp

donorFolder = os.path.join(args.dataPath, phiDateStamp + "-donor-data/")
if not os.path.isdir(donorFolder):
    sys.exit("{0} is not a directory".format(donorFolder))

# create output folders
donorJsonDataFolder = donorFolder + phiDateStamp + "-donorJsonData/"
if not os.path.exists(donorJsonDataFolder):
    os.makedirs(donorJsonDataFolder)

# load in list of unique donors
uniqueDonors = pd.read_csv(donorFolder + phiDateStamp + "-uniqueDonorList.csv",
                           index_col="dIndex")


# %% pull the json files for all of the unique donors
for userID, donorGroup in zip(uniqueDonors.userID, uniqueDonors.donorGroup):
    jsonDataName = "PHI-" + userID + ".json"
    outputFilePathName = donorJsonDataFolder + jsonDataName

    # if the json file already exists, do NOT pull it again
    if not os.path.exists(outputFilePathName):

        # case where donorGroup is bigdata, but should be ""
        if donorGroup == "bigdata":
            donorGroup = ""

        # get environmental variables
        email, password = \
            environmentalVariables.get_environmental_variables(donorGroup)

        # get json data
        p = sub.Popen(["getdata",
                       email,
                       userID,
                       "-p",
                       password,
                       "-o",
                       outputFilePathName,
                       "-v"], stdout=sub.PIPE, stderr=sub.PIPE)

        output, errors = p.communicate()
        output = output.decode("utf-8")
        errors = errors.decode("utf-8")

        if output.startswith("Successful login.\nSuccessful") is False:
            sys.exit("ERROR with" + email +
                     " ouput: " + output +
                     " errorMessage: " + errors)

        print(userID, "complete")

    else:
        print(userID, "data already downloaded")
